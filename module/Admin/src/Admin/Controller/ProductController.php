<?php
/**
 * Created by PhpStorm.
 * User: Thai Duc
 * Date: 10-Mar-18
 * Time: 10:34 AM
 */

namespace Admin\Controller;


use function GuzzleHttp\Promise\promise_for;
use Zend\Mvc\MvcEvent;
use Zend\Validator\File\MimeType;
use Zend\Validator\File\Size;
use Zend\View\Model\JsonModel;
use Zend\View\Model\ViewModel;
use DoctrineORMModule\Paginator\Adapter\DoctrinePaginator as DoctrineAdapter;
use Doctrine\ORM\Tools\Pagination\Paginator as ORMPaginator;
use Zend\Paginator;

class ProductController extends MainController
{
    public function onDispatch(MvcEvent $e)
    {
        $sm = $e->getApplication()->getServiceManager();
        $authService = $sm->get('ZendAuth');

        if ($authService->hasIdentity()) {
            $authInfo = $authService->getIdentity();
            $config['authentication'] = function () {
                return isset($_SESSION['IsAuthorized']) && $_SESSION['IsAuthorized'];
            };

        } else {
            //nếu chưa đăng nhập thì k đc làm những quyền gì
            $route = $e->getRouteMatch();
            $actionName = $route->getParam('action');
            //các quyền mà user k đc truy cập
            $roleAction = array('add', 'edit', 'delete', 'list','deleteImage');
            if (in_array($actionName, $roleAction)) {
                $this->flashMessenger()->addMessage('Vui lòng đăng nhập để truy cập vào hệ thống');
                return $this->redirect()->toRoute('admin/verify', array('action' => 'login'));
            }
        }
        return parent::onDispatch($e); // TODO: Change the autogenerated stub
    }

//    public function __construct()
//    {
//        $config['authentication'] = function () {
//            return isset($_SESSION['IsAuthorized']) && $_SESSION['IsAuthorized'];
//        };
//    }

    public function getEntitymanager()
    {
        $em = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');
        return $em;
    }

    public function getFileLocation()
    {
        $config = $this->getServiceLocator()->get('config');
        return $config['upload_location'];
    }

    public function indexAction()
    {
        $em = $this->getEntitymanager();
        $repositoryProduct = $em->getRepository('\Admin\Entity\Product');

        $page = (int)$this->params()->fromRoute('page', 1);
        $pagingConfig = array(
            'ItemCountPerPage' => 10,
            'CurrentPageNumber' => $page,
        );
        //lúc đầu thì dùng ntn. nếu tạo ra file repository thì dùng cái kia
//        $products = $repositoryProduct->findBy(array(),array('id' => 'DESC'));
//        $ormPaging = new ORMPaginator($repositoryProduct->createQueryBuilder('posts'));

        $products = $repositoryProduct->getAll($pagingConfig);
        $ormPaging = new ORMPaginator($products);
        $adapter = new DoctrineAdapter($ormPaging);
        $paging = new Paginator\Paginator($adapter);
        $paging->setDefaultItemCountPerPage($pagingConfig['ItemCountPerPage']);
        $paging->setCurrentPageNumber($pagingConfig['CurrentPageNumber']);

        $flash = $this->flashMessenger()->getMessages();
        return new ViewModel(array('products' => $paging, 'flash' => $flash));
    }

    public function addAction()
    {
        $sm = $this->getServiceLocator();
        $em = $this->getEntitymanager();
        $form = $sm->get('FormElementManager')->get('ProductForm');

        $arrCate = $sm->get('CategoryManager')->getArrayCategory();
        $form->get('id_type')->setValueOptions($arrCate);
        $arrUnit = $sm->get('UnitManager')->getArrayUnit();
        $form->get('unit')->setValueOptions($arrUnit);

        $request = $this->getRequest();
        if ($request->isPost()) {
            $dataInput = array_merge_recursive(
                $request->getPost()->toArray(),
                $request->getFiles()->toArray()
            );
            $form->setData($dataInput);
            if ($form->isValid()) {

                //upload file
                $files = $this->params()->fromFiles();
                $uploadImageDetails = $this->upload($files['productImages']);
                $fileImage = array($files['image']);
                $uploadImage = $this->upload($fileImage);

                echo "<pre>";
                print_r($files);
                echo "</pre>";

                if ($uploadImageDetails['status'] == 'success' AND $uploadImage['status'] == 'success') {
                    $dataValid = $form->getData();
                    $sm->get('ProductManager')->addProduct($dataValid);
                    $this->flashMessenger()->addMessage('Thêm sản phẩm thành công !');
                    $this->redirect()->toRoute('admin/product', array('action' => 'index'));
                }
            }
        }
        return new ViewModel(array('form' => $form));
    }


    public function editAction()
    {
        $sm = $this->getServiceLocator();
        $em = $this->getEntitymanager();
        $id = $this->params()->fromRoute('id', 0);
        $product = $em->getRepository('\Admin\Entity\Product')->findOneBy(array('id' => $id));

        if (!$id OR empty($product)) {
            return $this->redirect()->toRoute('admin/product', array('action' => 'index'));
        }

        $form = $sm->get('FormElementManager')->get('ProductForm');
        $formData = array(
            'name' => $product->getName(),
            'description' => $product->getDescription(),
            'unit_price' => $product->getUnitPrice(),
            'promotion_price' => $product->getPromotionPrice(),
            'image' => $product->getImage(),
            'new' => $product->getNew(),
            'quantity' => $product->getQuantity(),
            'view' => $product->getView(),
        );
        $form->setData($formData);

        $arrCate = $sm->get('CategoryManager')->getArrayCategory();
        $form->get('id_type')->setValueOptions($arrCate);
        $form->get('id_type')->setAttributes(array('value' => $product->getCategory()->getId(), 'selected' => true));

        $arrUnit = $sm->get('UnitManager')->getArrayUnit();
        $form->get('unit')->setValueOptions($arrUnit);
        $form->get('unit')->setAttributes(array('value' => $product->getUnit()->getId(), 'selected' => true));

        $form->getInputFilter()->get('image')->setRequired(false);
        $form->getInputFilter()->get('productImages')->setRequired(false);

        $form->get('submit')->setAttribute('value', 'Edit');

        $request = $this->getRequest();
        if ($request->isPost()) {
            $dataInput = array_merge_recursive(
                $request->getPost()->toArray(),
                $request->getFiles()->toArray()
            );
            $form->setData($dataInput);
            if ($form->isValid()) {
                $dataValid = $form->getData();

                $files = $this->params()->fromFiles();
//                $uploadImageDetails = $this->upload($files['productImages']);
                $fileImage = array($files['image']);
                $uploadImage = $this->upload($fileImage);
                echo "<pre>";
                print_r($fileImage);

//                print_r($uploadImageDetails);
                print_r($uploadImage);
                echo "</pre>";
                if (
//                    $uploadImageDetails['status'] == 'success'
//                    AND
                    $uploadImage['status'] == 'success'
                ) {
                    $sm->get('ProductManager')->editProduct($product, $dataValid);
                    $this->flashMessenger()->addMessage('Sửa sản phẩm thành công !');
                    $this->redirect()->toRoute('admin/product', array('action' => 'index'));
                }

            }
        }
        return new ViewModel(array('form' => $form, 'productId' => $id, 'product' => $product));
    }

    public function deleteAction()
    {
        $em = $this->getEntitymanager();
        $id = $this->params()->fromRoute('id', 0);
        $product = $em->getRepository('\Admin\Entity\Product')->findOneBy(array('id' => $id));

        if (!$id OR empty($product)) {
            return $this->redirect()->toRoute('admin/product', array('action' => 'index'));
        }

        $em->remove($product);
        $em->flush();

        $this->flashMessenger()->addMessage("Xoá sản phẩm " . $product->getName() . " thành công !");
        return $this->redirect()->toRoute('admin/product', array('action' => 'index'));
    }

    public function upload($files, $allowed = array('image/jpg', 'image/gif', 'application/pdf', 'image/jpeg'))
    {
        $messages = array('status' => 'success');
        foreach ($files as $key => $file) {

            if (!empty($file['name'])) {
                $size = new \Zend\Validator\File\Size(array('min' => 1, 'max' => 31457280)); // minimum bytes filesize, max too..
                $mime = new MimeType($allowed);

                $adapter = new \Zend\File\Transfer\Adapter\Http();

                $fileType = explode('.', $file['name']);
                $fileType = $fileType[count($fileType) - 1];
                // rename file
                $rename = new \Zend\Filter\File\Rename(array(
                    'target' => './public/data/images/image.png',
                    "randomize" => true,
                ));

                $adapter->setValidators(array($size, $mime), $file['name']);
                $adapter->setFilters(array($rename), $file['name']);

                if ($adapter->isValid($file['name'])) {  // $key is field name in the form
                    $adapter->setDestination($this->getFileLocation());
                    if ($adapter->receive($file['name'])) {  // $key is field name in the form
                        $messages['status'] = 'success';
                        $messages['messages'][$file['name']] = array(
                            'filename' => $file['name'],
                            'status' => 'success',
                            'message' => 'File uploaded successfully!',
                        );
                    }
                } else {
                    $messages['status'] = 'error';
                    $messages['messages'][$file['name']] = array(
                        'status' => 'error',
                        'errors' => $adapter->getMessages(),
                    );
                    break;
                }
            }   // !empty($file)
        }
        return $messages;
    }


    public function deleteImageAction(){
        $em = $this->getEntitymanager();

        $id = $this->params()->fromRoute('id', 0);

        $productImage = $em->getRepository('\Admin\Entity\ProductImage')->findOneBy(array('id' => $id));
        unlink(PATH_APP."/data/images/".$productImage->getImage());
        $em->remove($productImage);
        $em->flush();

        $data = new JsonModel(array(
            'result' => 'success',
        ));
        return $data;
    }

}